generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env(""postgresql://preet:62prteoBlHN-V-B5scoytw@cyberdetective-16174.j77.aws-ap-south-1.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full"")
}

enum UserRole {
  ADMIN
  AUTHORs
  READER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  bio       String?
  role      UserRole @default(READER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  media     Media[]

  @@map("users")
}

model Post {
  id           String     @id @default(cuid())
  title        String
  slug         String     @unique
  content      String
  excerpt      String?
  featuredImage String?
  status       PostStatus @default(DRAFT)
  publishedAt  DateTime?
  scheduledAt  DateTime?
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories PostCategory[]
  tags       PostTag[]
  comments   Comment[]
  analytics  PostAnalytics?

  @@map("posts")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts PostCategory[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostTag[]

  @@map("tags")
}

model PostCategory {
  postId     String
  categoryId String

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  authorName  String
  authorEmail String
  postId      String
  userId      String?
  parentId    String?
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model PostAnalytics {
  id        String   @id @default(cuid())
  postId    String   @unique
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  readTime  Int      @default(0)
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_analytics")
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  uploadedBy   String
  createdAt    DateTime @default(now())

  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("media")
}

model Newsletter {
  id           String   @id @default(cuid())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())

  @@map("newsletter")
}